require('dotenv').config({ path: require('find-config')('.env') }) 

const program = require('commander')
const { getDocIdFromUrl, getTable, writeTable } = require('../lib/index')
const jsonfile = require('jsonfile')
program
  .command('get <docUrl> <tableName>')
  .option(
    '-a, --apiKey [apiKey]',
    'api key, default will try to read CODA_API from env'
  )
  .action(async (docUrl, tableName, options) => {
    const { apiKey = process.env.CODA_API_TOKEN } = options
    const docId = await getDocIdFromUrl(docUrl)
    const result = await getTable({ docId, tableName, apiKey })
    console.log(JSON.stringify(result))
  })

program
  .command('write <jsonFilePath> <docUrl> <tableName>')
  .option(
    '-a, --apiKey [apiKey]',
    'api key, default will try to read CODA_API from env'
  )
  .option(
    '-k, --keyColumns [keyColumns]',
    'key columns, if provided will upsert data'
  )
  .action(async (jsonFilePath, docUrl, tableName, options) => {
    const { apiKey = process.env.CODA_API_TOKEN, keyColumns = null } = options
    const docId = await getDocIdFromUrl(docUrl)
    let keys = []
    if (keyColumns) {
      keys = keyColumns.split(',')
    }
    const result = await writeTable(jsonfile.readFileSync(jsonFilePath), {
      docId,
      tableName,
      apiKey,
      keyColumns: keys
    })
  })

program.on('command:*', () => {
  console.error(
    'Invalid command: %s\nSee --help for a list of available commands.',
    program.args.join(' ')
  )
  process.exit(1)
})

program.parse(process.argv)
